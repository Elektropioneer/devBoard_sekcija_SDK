
adc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000030  00000000  00000000  0000013c  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000031  00000000  00000000  0000016c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000000bb  00000000  00000000  0000019d  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000085  00000000  00000000  00000258  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000133  00000000  00000000  000002dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000040  00000000  00000000  00000410  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000098  00000000  00000000  00000450  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00000028  00000000  00000000  000004e8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 61 00 	call	0xc2	; 0xc2 <main>
  78:	0c 94 72 00 	jmp	0xe4	; 0xe4 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <setup>:
/*ADC Multiplexer Selection Register – ADMUX : For selecting the reference voltage and the input channel.
ADC Control and Status Register A – ADCSRA : As the name says it has the status of ADC and is also use for controlling it.
The ADC Data Register – ADCL and ADCH : The final result of conversion is here.*/
void setup()
{
	DDRB = 0x01;
  80:	81 e0       	ldi	r24, 0x01	; 1
  82:	84 b9       	out	0x04, r24	; 4
	ADMUX |= (1 << REFS0);
  84:	ec e7       	ldi	r30, 0x7C	; 124
  86:	f0 e0       	ldi	r31, 0x00	; 0
  88:	80 81       	ld	r24, Z
  8a:	80 64       	ori	r24, 0x40	; 64
  8c:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1);
  8e:	ea e7       	ldi	r30, 0x7A	; 122
  90:	f0 e0       	ldi	r31, 0x00	; 0
  92:	80 81       	ld	r24, Z
  94:	86 68       	ori	r24, 0x86	; 134
  96:	80 83       	st	Z, r24
}
  98:	08 95       	ret

0000009a <ReadADC>:
uint16_t ReadADC()
{
	ADCSRA |= (1 << ADSC);
  9a:	ea e7       	ldi	r30, 0x7A	; 122
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	80 81       	ld	r24, Z
  a0:	80 64       	ori	r24, 0x40	; 64
  a2:	80 83       	st	Z, r24
	while(!(ADCSRA & (1 << ADIF)));
  a4:	80 81       	ld	r24, Z
  a6:	84 ff       	sbrs	r24, 4
  a8:	fd cf       	rjmp	.-6      	; 0xa4 <ReadADC+0xa>
	ADCSRA |= (1 << ADIF);
  aa:	ea e7       	ldi	r30, 0x7A	; 122
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	80 81       	ld	r24, Z
  b0:	80 61       	ori	r24, 0x10	; 16
  b2:	80 83       	st	Z, r24
	return (ADC);
  b4:	20 91 78 00 	lds	r18, 0x0078
  b8:	30 91 79 00 	lds	r19, 0x0079
}
  bc:	82 2f       	mov	r24, r18
  be:	93 2f       	mov	r25, r19
  c0:	08 95       	ret

000000c2 <main>:
int main(void)
{
  c2:	1f 93       	push	r17
  c4:	cf 93       	push	r28
  c6:	df 93       	push	r29
	setup();
  c8:	0e 94 40 00 	call	0x80	; 0x80 <setup>
	while(1)
	{
		swag = ReadADC();
		if(swag > 512)
		{
			PORTB = 0x01;
  cc:	c5 e2       	ldi	r28, 0x25	; 37
  ce:	d0 e0       	ldi	r29, 0x00	; 0
  d0:	11 e0       	ldi	r17, 0x01	; 1
{
	setup();
	uint16_t swag;
	while(1)
	{
		swag = ReadADC();
  d2:	0e 94 4d 00 	call	0x9a	; 0x9a <ReadADC>
		if(swag > 512)
  d6:	81 50       	subi	r24, 0x01	; 1
  d8:	92 40       	sbci	r25, 0x02	; 2
  da:	10 f0       	brcs	.+4      	; 0xe0 <main+0x1e>
		{
			PORTB = 0x01;
  dc:	18 83       	st	Y, r17
  de:	f9 cf       	rjmp	.-14     	; 0xd2 <main+0x10>
		}
		else{
			PORTB = 0x00;
  e0:	18 82       	st	Y, r1
  e2:	f7 cf       	rjmp	.-18     	; 0xd2 <main+0x10>

000000e4 <_exit>:
  e4:	f8 94       	cli

000000e6 <__stop_program>:
  e6:	ff cf       	rjmp	.-2      	; 0xe6 <__stop_program>
