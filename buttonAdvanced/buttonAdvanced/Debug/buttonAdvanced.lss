
buttonAdvanced.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000014c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000028  00000000  00000000  000001a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000002a  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000001bc  00000000  00000000  000001f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000f9  00000000  00000000  000003ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000020d  00000000  00000000  000004a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000030  00000000  00000000  000006b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000eb  00000000  00000000  000006e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000000a8  00000000  00000000  000007cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000068  00000000  00000000  00000877  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 56 00 	call	0xac	; 0xac <main>
  78:	0c 94 a4 00 	jmp	0x148	; 0x148 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <regulation>:
#include <util/delay.h>
/*
* Funkcija reset-uje LED diode kad ih previse shift-ujemo
*/
void regulation()
{
  80:	28 ee       	ldi	r18, 0xE8	; 232
  82:	33 e0       	ldi	r19, 0x03	; 3
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  84:	44 e1       	ldi	r20, 0x14	; 20
  86:	51 e0       	ldi	r21, 0x01	; 1
  88:	ca 01       	movw	r24, r20
  8a:	01 97       	sbiw	r24, 0x01	; 1
  8c:	f1 f7       	brne	.-4      	; 0x8a <regulation+0xa>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  8e:	21 50       	subi	r18, 0x01	; 1
  90:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  92:	d1 f7       	brne	.-12     	; 0x88 <regulation+0x8>
	_delay_ms(100);
	if(PORTB == 0b00001000)
  94:	85 b1       	in	r24, 0x05	; 5
  96:	88 30       	cpi	r24, 0x08	; 8
  98:	19 f4       	brne	.+6      	; 0xa0 <regulation+0x20>
	{
		PORTB = 0b00000001;
  9a:	81 e0       	ldi	r24, 0x01	; 1
  9c:	85 b9       	out	0x05, r24	; 5
  9e:	08 95       	ret
	}
	else if(PORTB == 0b00000000)
  a0:	85 b1       	in	r24, 0x05	; 5
  a2:	88 23       	and	r24, r24
  a4:	11 f4       	brne	.+4      	; 0xaa <regulation+0x2a>
	{
		PORTB = 0b00000100;
  a6:	84 e0       	ldi	r24, 0x04	; 4
  a8:	85 b9       	out	0x05, r24	; 5
  aa:	08 95       	ret

000000ac <main>:
	}
}
int main(void)
{
  ac:	cf 92       	push	r12
  ae:	df 92       	push	r13
  b0:	ef 92       	push	r14
  b2:	ff 92       	push	r15
  b4:	0f 93       	push	r16
  b6:	1f 93       	push	r17
  b8:	cf 93       	push	r28
  ba:	df 93       	push	r29
	DDRB |= (1<<0) | (1<<1) | (1<<2);
  bc:	e4 e2       	ldi	r30, 0x24	; 36
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	80 81       	ld	r24, Z
  c2:	87 60       	ori	r24, 0x07	; 7
  c4:	80 83       	st	Z, r24
	PORTB = (1<<PB0) & (1<<PB1) & (1<<PB2);
  c6:	a5 e2       	ldi	r26, 0x25	; 37
  c8:	b0 e0       	ldi	r27, 0x00	; 0
  ca:	1c 92       	st	X, r1
	
	DDRD |= (1 << PD6) | (1 << PD5);
  cc:	ea e2       	ldi	r30, 0x2A	; 42
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	80 81       	ld	r24, Z
  d2:	80 66       	ori	r24, 0x60	; 96
  d4:	80 83       	st	Z, r24
	PORTD |= (1 << PD6) | (1 << PD5);
  d6:	eb e2       	ldi	r30, 0x2B	; 43
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	80 81       	ld	r24, Z
  dc:	80 66       	ori	r24, 0x60	; 96
  de:	80 83       	st	Z, r24
	
	PORTB |= (1 << PB0);
  e0:	8c 91       	ld	r24, X
  e2:	81 60       	ori	r24, 0x01	; 1
  e4:	8c 93       	st	X, r24
	
	while(1)
	{
		if(!(PIND & (1<<PD7)))
  e6:	0f 2e       	mov	r0, r31
  e8:	f9 e2       	ldi	r31, 0x29	; 41
  ea:	ef 2e       	mov	r14, r31
  ec:	ff 24       	eor	r15, r15
  ee:	f0 2d       	mov	r31, r0
		{
			_delay_ms(100);
			PORTB = (PORTB >> 1);
		} 
		else if(!(PIND & (1<<PD5)))
  f0:	0f 2e       	mov	r0, r31
  f2:	f8 ee       	ldi	r31, 0xE8	; 232
  f4:	cf 2e       	mov	r12, r31
  f6:	f3 e0       	ldi	r31, 0x03	; 3
  f8:	df 2e       	mov	r13, r31
  fa:	f0 2d       	mov	r31, r0
  fc:	c4 e1       	ldi	r28, 0x14	; 20
  fe:	d1 e0       	ldi	r29, 0x01	; 1
		{
			_delay_ms(100);
			PORTB = (PORTB << 1);
 100:	05 e2       	ldi	r16, 0x25	; 37
 102:	10 e0       	ldi	r17, 0x00	; 0
	
	PORTB |= (1 << PB0);
	
	while(1)
	{
		if(!(PIND & (1<<PD7)))
 104:	f7 01       	movw	r30, r14
 106:	80 81       	ld	r24, Z
 108:	88 23       	and	r24, r24
 10a:	64 f0       	brlt	.+24     	; 0x124 <main+0x78>
 10c:	96 01       	movw	r18, r12
 10e:	ce 01       	movw	r24, r28
 110:	01 97       	sbiw	r24, 0x01	; 1
 112:	f1 f7       	brne	.-4      	; 0x110 <main+0x64>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 114:	21 50       	subi	r18, 0x01	; 1
 116:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 118:	d1 f7       	brne	.-12     	; 0x10e <main+0x62>
		{
			_delay_ms(100);
			PORTB = (PORTB >> 1);
 11a:	f8 01       	movw	r30, r16
 11c:	80 81       	ld	r24, Z
 11e:	86 95       	lsr	r24
 120:	80 83       	st	Z, r24
 122:	0f c0       	rjmp	.+30     	; 0x142 <main+0x96>
		} 
		else if(!(PIND & (1<<PD5)))
 124:	f7 01       	movw	r30, r14
 126:	80 81       	ld	r24, Z
 128:	85 fd       	sbrc	r24, 5
 12a:	0b c0       	rjmp	.+22     	; 0x142 <main+0x96>
 12c:	96 01       	movw	r18, r12
 12e:	ce 01       	movw	r24, r28
 130:	01 97       	sbiw	r24, 0x01	; 1
 132:	f1 f7       	brne	.-4      	; 0x130 <main+0x84>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 134:	21 50       	subi	r18, 0x01	; 1
 136:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 138:	d1 f7       	brne	.-12     	; 0x12e <main+0x82>
		{
			_delay_ms(100);
			PORTB = (PORTB << 1);
 13a:	f8 01       	movw	r30, r16
 13c:	80 81       	ld	r24, Z
 13e:	88 0f       	add	r24, r24
 140:	80 83       	st	Z, r24
		}
		regulation();
 142:	0e 94 40 00 	call	0x80	; 0x80 <regulation>
 146:	de cf       	rjmp	.-68     	; 0x104 <main+0x58>

00000148 <_exit>:
 148:	f8 94       	cli

0000014a <__stop_program>:
 14a:	ff cf       	rjmp	.-2      	; 0x14a <__stop_program>
