
buttonSimple.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ae  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000102  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  00000122  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000007a  00000000  00000000  0000013d  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000043  00000000  00000000  000001b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000000af  00000000  00000000  000001fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  000002ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000097  00000000  00000000  000002cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00000018  00000000  00000000  00000363  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 55 00 	jmp	0xaa	; 0xaa <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <avr/io.h>
#include <util/delay.h>

int main(void)
{
	DDRB |= (1<<0) | (1<<1) | (1<<2);
  80:	e4 e2       	ldi	r30, 0x24	; 36
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	80 81       	ld	r24, Z
  86:	87 60       	ori	r24, 0x07	; 7
  88:	80 83       	st	Z, r24
	PORTB = (1<<PB0) & (1<<PB1) & (1<<PB2);
  8a:	15 b8       	out	0x05, r1	; 5
	
	DDRD = 1 << PD7;
  8c:	80 e8       	ldi	r24, 0x80	; 128
  8e:	8a b9       	out	0x0a, r24	; 10
	PORTD = 1 << PD7;
  90:	8b b9       	out	0x0b, r24	; 11
	while(1)
	{
		if(!(PIND & (1<<PD7)))
  92:	a9 e2       	ldi	r26, 0x29	; 41
  94:	b0 e0       	ldi	r27, 0x00	; 0
		{
			PORTB = (1<<PB0) | (1<<PB1) | (1<<PB2);
  96:	e5 e2       	ldi	r30, 0x25	; 37
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	97 e0       	ldi	r25, 0x07	; 7
	
	DDRD = 1 << PD7;
	PORTD = 1 << PD7;
	while(1)
	{
		if(!(PIND & (1<<PD7)))
  9c:	8c 91       	ld	r24, X
  9e:	88 23       	and	r24, r24
  a0:	14 f0       	brlt	.+4      	; 0xa6 <main+0x26>
		{
			PORTB = (1<<PB0) | (1<<PB1) | (1<<PB2);
  a2:	90 83       	st	Z, r25
  a4:	fb cf       	rjmp	.-10     	; 0x9c <main+0x1c>
		}
		else{
			PORTB = 0x00;
  a6:	10 82       	st	Z, r1
  a8:	f9 cf       	rjmp	.-14     	; 0x9c <main+0x1c>

000000aa <_exit>:
  aa:	f8 94       	cli

000000ac <__stop_program>:
  ac:	ff cf       	rjmp	.-2      	; 0xac <__stop_program>
